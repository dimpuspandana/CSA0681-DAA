def bubble_sort(arr):
    n = len(arr)
    for i in range(n):
        # Initialize a flag to check if any swaps are made
        swapped = False
        
        # Perform a single pass of the Bubble Sort algorithm
        for j in range(0, n - i - 1):
            if arr[j] > arr[j + 1]:
                # Swap the elements
                arr[j], arr[j + 1] = arr[j + 1], arr[j]
                swapped = True
        
        # If no elements were swapped, the list is already sorted
        if not swapped:
            break
    
    return arr

# Test cases
test_cases = [
    {"input": [], "expected": []},
    {"input": [1], "expected": [1]},
    {"input": [7, 7, 7, 7], "expected": [7, 7, 7, 7]},
    {"input": [-5, -1, -3, -2, -4], "expected": [-5, -4, -3, -2, -1]},
    {"input": [5, 2, 9, 1, 5, 6], "expected": [1, 2, 5, 5, 6, 9]},
    {"input": [10, 8, 6, 4, 2], "expected": [2, 4, 6, 8, 10]},
    {"input": [1, 2, 3, 4, 5], "expected": [1, 2, 3, 4, 5]},
    {"input": [4, 3, 2, 1], "expected": [1, 2, 3, 4]},  # Edge case for reverse sorted array
    {"input": [1, 2, 3, 5, 4], "expected": [1, 2, 3, 4, 5]},  # Edge case for almost sorted array
]

# Run test cases
for i, test in enumerate(test_cases):
    result = bubble_sort(test["input"].copy())  # Copy to avoid modifying original input
    print(f"Test Case {i + 1}:")
    print(f"Input: {test['input']}")
    print(f"Expected Output: {test['expected']}")
    print(f"Actual Output: {result}")
    print()

