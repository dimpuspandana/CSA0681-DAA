FIBONACCI SERIES USING RECURSION :-

#include <stdio.h>
int fibonacci(int n) {
    return (n <= 1) ? n : fibonacci(n - 1) + fibonacci(n - 2);
}
int main() {
    int n;
printf("Enter the number of terms: ");
    scanf("%d", &n);
printf("Fibonacci Series: ");
    for (int i = 0; i < n; i++) {
        printf("%d ", fibonacci(i));
    }
return 0;
}

 

ARMSTRONG NUMBER:
#include <stdio.h>
int countDigits(int n)
 {
    if(n==0)
	 {
        return 0;
    } 
	else
	 {
        return 1+countDigits(n/10);
    }
}
int power(int n,int r)
 {
    if(r==0) 
	{
        return 1;
    } 
	else
	 {
        return n*power(n,r-1);
    }
}
int isArmstrong(int n,int temp,int digits)
 {
    if(n==0)
	 {
        return temp;
    } 
	else
	 {
        int rem=n%10;
        temp=temp+power(rem,digits);
        return isArmstrong(n/10,temp,digits);
    }
}
int main()
{
    int num;
    printf("Enter a number: ");
    scanf("%d", &num);
    int digits=countDigits(num);
    int result=isArmstrong(num,0,digits);
    if (result==num)
	 {
        printf("%d is an Armstrong number.\n", num);
    } else {
        printf("%d is not an Armstrong number.\n", num);
    }
    return 0;
}

 

GCD OF TWO NUMBERS:
#include <stdio.h>
int gcd(int a,int b) 
{
    if(b==0) 
	{
        return a;
    } else
	 {
        return gcd(b,a%b);
    }
}

int main()
 {
    int num1,num2;
    printf("Enter two numbers: ");
    scanf("%d %d", &num1, &num2);
    printf("GCD of %d and %d is %d\n", num1, num2, gcd(num1, num2));
    return 0;
}

 

LARGEST  ELEMENT OF AN ARRAY:
#include <stdio.h>
int largestelement(int arr[], int size)
 {
    int largest=arr[0];
    for(int i=1;i<size;i++) 
	{
        if (arr[i]>largest)
		 {
            largest=arr[i];
        }
    }
    return largest;
}
int main()
 {
    int arr[]={12,45,7,23,56,89,34};
    int size =sizeof(arr)/sizeof(arr[0]);
    printf("Largest element in the array is %d\n",largestelement(arr,size));
    return 0;
}



FACTORIAL NUMBER:
#include<stdio.h>
int factorial(int n) 
{
    if (n==0)
	 {
        return 1;
    } else
	 {
        return n*factorial(n-1);
    }
}
int main() 
{
    int number=6;
    int result=factorial(number);
    printf("Factorial of %d is %d\n",number,result);
    return 0;
}



COPY STRING:
#include <stdio.h>
void copy_string(char*src,char*dst,int i) 
{
    if(src[i]=='\0')
	 {
        dst[i]='\0'; 
        return;
    }
    dst[i]=src[i];
    copy_string(src,dst,i+1);
}
int main() 
{
    char src[100];
    char dst[100];
    printf("Enter a string: ");
    scanf("%s", src);
    copy_string(src, dst, 0);
    printf("Copied string: %s\n", dst);
    return 0;
}



REVERSE STRING IN RECURSION:
#include <stdio.h>
#include <string.h>
void reversestring(char *str)
{
    if (*str=='\0') 
	{
        return;
    }
	 else
	 {
        reversestring(str+1);
        printf("%c",*str);
    }
}
int main() 
{
    char str[100];
    printf("Enter a string:");
    fgets(str,sizeof(str),stdin);
    str[strlen(str) - 1] = '\0'; 
    printf("Reverse of the string is: ");
    reversestring(str);
    printf("\n");
    return 0;
}



GENARATE ALL PRIME NUMBER IN RECURSION:
#include <stdio.h>
int is_prime(int n,int i)
 {
    if(i==1) 
	{
        return 1; 
    }
    if (n<=2) 
	{
        return 1; 
    }
    if (n%i==0)
	 {
        return 0; 
    }
    if (i*i>n)
	 {
        return 1; 
    }
    return is_prime(n,i+1);
}
void generate_primes(int n)
 {
    for (int i=2;i<=n;i++)
	 {
        if (is_prime(i,2)) 
		{
            printf("%d",i);
        }
    }
    printf("\n");
}

int main()
 {
    int num;
    printf("Enter a number:\n ");
    scanf("%d", &num);
    printf("Prime numbers up to %d are:\n ", num);
    generate_primes(num);
    return 0;
}



PRIME NUMBER OR NOT:
[1:33 pm, 12/6/2024] Jasvina SSE: #include<stdio.h>
int is_prime(int n, int i) 
{
    if(i==2) 
	{
        if(n%i==0) 
		{
            return 0; 
        }
		 else 
		 {
            return 1;
        }
    }
    if(n%i==0)
	 {
        return 0;
    }
    
    return is_prime(n,i-1);
}
int main()
 {
    int num;
    printf("Enter a number:");
    scanf("%d",&num);
    if (is_prime(num,num/2))
	 {
        printf("%d is a prime number.\n",num);
    }
	 else 
	{
        printf("%d is not a prime number.\n",num);
    }
    return 0;
}



PALINDOME OR NOT:
#include <stdio.h>
#include <string.h>
int is_palindrome(char *str, int start, int end)
 {
    if (start >= end)
	 {
        return 1;
    }
    if (str[start]!= str[end]) 
	{
        return 0;
    }

    return is_palindrome(str,start+1,end-1);
}

int main()
 {
    char str[100];
    printf("Enter a string: ");
    scanf("%s", str);
    int len=strlen(str);
    if (is_palindrome(str,0,len-1))
	 {
        printf("%s is a palindrome.\n", str);
    } else {
        printf("%s is not a palindrome.\n", str);
    }
    return 0;
}





  

        
