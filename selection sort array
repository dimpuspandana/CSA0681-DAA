def selection_sort(arr):
    n = len(arr)
    for i in range(n):
        # Find the minimum element in the unsorted portion of the array
        min_index = i
        for j in range(i + 1, n):
            if arr[j] < arr[min_index]:
                min_index = j
        # Swap the found minimum element with the first unsorted element
        arr[i], arr[min_index] = arr[min_index], arr[i]
    return arr

# Test cases
test_cases = [
    {"input": [], "expected": []},
    {"input": [1], "expected": [1]},
    {"input": [7, 7, 7, 7], "expected": [7, 7, 7, 7]},
    {"input": [-5, -1, -3, -2, -4], "expected": [-5, -4, -3, -2, -1]},
    {"input": [5, 2, 9, 1, 5, 6], "expected": [1, 2, 5, 5, 6, 9]},
    {"input": [10, 8, 6, 4, 2], "expected": [2, 4, 6, 8, 10]},
    {"input": [1, 2, 3, 4, 5], "expected": [1, 2, 3, 4, 5]},
]

# Run test cases
for i, test in enumerate(test_cases):
    result = selection_sort(test["input"].copy())  # copy to avoid modifying original input
    print(f"Test Case {i + 1}:")
    print(f"Input: {test['input']}")
    print(f"Expected Output: {test['expected']}")
    print(f"Actual Output: {result}")
    print()

# Expected Outputs:
# Test Case 1:
# Input: []
# Expected Output: []
# Actual Output: []
#
# Test Case 2:
# Input: [1]
# Expected Output: [1]
# Actual Output: [1]
#
# Test Case 3:
# Input: [7, 7, 7, 7]
# Expected Output: [7, 7, 7, 7]
# Actual Output: [7, 7, 7, 7]
#
# Test Case 4:
# Input: [-5, -1, -3, -2, -4]
# Expected Output: [-5, -4, -3, -2, -1]
# Actual Output: [-5, -4, -3, -2, -1]
#
# Test Case 5:
# Input: [5, 2, 9, 1, 5, 6]
# Expected Output: [1, 2, 5, 5, 6, 9]
# Actual Output: [1, 2, 5, 5, 6, 9]
#
# Test Case 6:
# Input: [10, 8, 6, 4, 2]
# Expected Output: [2, 4, 6, 8, 10]
# Actual Output: [2, 4, 6, 8, 10]
#
# Test Case 7:
# Input: [1, 2, 3, 4, 5]
# Expected Output: [1, 2, 3, 4, 5]
# Actual Output: [1, 2, 3, 4, 5]
