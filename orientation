def orientation(p, q, r):
    """ Return the orientation of the triplet (p, q, r).
        0 -> p, q and r are collinear
        1 -> Clockwise
        2 -> Counterclockwise
    """
    val = (q[1] - p[1]) * (r[0] - q[0]) - (q[0] - p[0]) * (r[1] - q[1])
    if val == 0:
        return 0
    elif val > 0:
        return 1
    else:
        return 2

def on_segment(p, q, r):
    """ Check if point q lies on segment pr. """
    if (q[0] <= max(p[0], r[0]) and q[0] >= min(p[0], r[0]) and
        q[1] <= max(p[1], r[1]) and q[1] >= min(p[1], r[1])):
        return True
    return False

def do_intersect(p1, q1, p2, q2):
    """ Check if segment p1q1 intersects with segment p2q2. """
    o1 = orientation(p1, q1, p2)
    o2 = orientation(p1, q1, q2)
    o3 = orientation(p2, q2, p1)
    o4 = orientation(p2, q2, q1)
    
    if (o1 != o2 and o3 != o4):
        return True
    
    if (o1 == 0 and on_segment(p1, p2, q1)):
        return True
    
    if (o2 == 0 and on_segment(p1, q2, q1)):
        return True
    
    if (o3 == 0 and on_segment(p2, p1, q2)):
        return True
    
    if (o4 == 0 and on_segment(p2, q1, q2)):
        return True
    
    return False

def brute_force_convex_hull(points):
    """ Find the convex hull of a set of points using the brute force approach. """
    n = len(points)
    if n < 3:
        return "Convex hull not possible"
    
    hull = []
    
    for i in range(n):
        for j in range(i + 1, n):
            count = 0
            for k in range(n):
                if (k != i and k != j and
                    orientation(points[i], points[j], points[k]) == 0):
                    count += 1
            
            if count == 0:
                hull.append(points[i])
                hull.append(points[j])
    
    return hull

# Test case for convex hull
points_convex_hull = [(10, 0), (11, 5), (5, 3), (9, 3.5), (15, 3), (12.5, 7), (6, 6.5), (7.5, 4.5)]
convex_hull_points = brute_force_convex_hull(points_convex_hull)

# Output the result
print("Convex Hull Points (Brute Force):", convex_hull_points)
