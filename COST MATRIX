import itertools

def total_cost(assignment, cost_matrix):
    """ Calculate the total cost of a given assignment. """
    return sum(cost_matrix[i][assignment[i]] for i in range(len(assignment)))

def assignment_problem(cost_matrix):
    """ Solve the assignment problem using exhaustive search (brute force). """
    n = len(cost_matrix)
    
    # Generate all possible permutations of worker indices
    all_permutations = itertools.permutations(range(n))
    
    # Initialize variables to track the minimum cost and optimal assignment found
    min_cost = float('inf')
    optimal_assignment = None
    
    # Iterate through each permutation (representing a potential assignment)
    for perm in all_permutations:
        # Calculate the total cost of the current assignment
        cost = total_cost(perm, cost_matrix)
        
        # Update minimum cost and optimal assignment if the current cost is lower
        if cost < min_cost:
            min_cost = cost
            optimal_assignment = perm
    
    return min_cost, optimal_assignment

# Test Cases
cost_matrix1 = [
    [3, 10, 7],
    [8, 5, 12],
    [4, 6, 9]
]

cost_matrix2 = [
    [15, 9, 4],
    [8, 7, 18],
    [6, 12, 11]
]

# Solve assignment problem for Test Case 1
min_cost1, optimal_assignment1 = assignment_problem(cost_matrix1)
print("Test Case 1:")
print(f"Optimal Assignment: {[(i+1, j+1) for i, j in enumerate(optimal_assignment1)]}")
print(f"Total Cost: {min_cost1}")
print()

# Solve assignment problem for Test Case 2
min_cost2, optimal_assignment2 = assignment_problem(cost_matrix2)
print("Test Case 2:")
print(f"Optimal Assignment: {[(i+1, j+1) for i, j in enumerate(optimal_assignment2)]}")
print(f"Total Cost: {min_cost2}")
